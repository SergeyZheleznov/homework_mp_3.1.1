// homework_mp_3.1.1.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
// задача к теме 3 из модуля "многопоточность"

//Сортировка выбором

//Реализуйте алгоритм сортировки выбором.
//Сортировка выбором состоит в том, что в неупорядоченном списке находится наименьший элемент.Выбранный в исходном списке минимальный элемент записывается на i - е место исходного списка(i = 1, 2, …, п), а элемент с i - го места — на место выбранного.При этом очевидно, что уже упорядоченные элементы, а они будут расположены, начиная с первого места, исключаются из дальнейшей сортировки, поэтому длина списка, участвующего в каждом последующем просмотре, должна быть на один элемент меньше предыдущего.
//Поиск минимального элемента реализуйте в виде асинхронной задачи.
//Результат должен возвращаться в основной поток через связку std::promise - std::future.


#include <iostream>

int find_min(int min, int i, int N, int* arr)
{
    for (int j = i + 1; j < N; j++)
    {
        min = (arr[j] < arr[min]) ? j : min;
    }
    return (min);
}

int main()
{
    std::cout << "Hello World!\n";

    const int N = 6;
    int* arr = new int[N] {4, 2, 5, 9, 3, 7};

    int min = 0;
    int buf = 0;

    for (int i = 0; i < N; i++)
    {
        min = 1; 
        min = find_min(min, i, N, arr);
        for (int j = i + 1; j < N; j++)
        {
            min = ( arr[j] < arr[min] ) ? j : min;
        }
        if (i != min)
        {
            buf = arr[i];
            arr[i] = arr[min];
            arr[min] = buf;
        }
    }

    for (int i = 0; i < N; i++)
        std::cout << arr[i] << std::endl;
    std::cout << std::endl;
    return 0;
}